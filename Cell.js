"use strict";function composeExpressionWithParameters(e,t){return`${Object.keys(t).map((e=>`const ${e} = ${t[e]};`)).join("\n")};\n${e}`}function evaluate(expression){return eval(expression)}function evaluateExpressionWithParameters(expression,parameters){return eval(composeExpressionWithParameters(expression,parameters))}function computeGeometry(e,t){return e.geometry.map((e=>e.map((e=>{if("number"==typeof e)return e;if("string"!=typeof e)return;return evaluate(composeExpressionWithParameters(e,t))}))))}function composeSizedPoints(e,t){return e.map((e=>[t*e[0],t*e[1]]))}function computeCoordinate(e,t){Object.values(t);return evaluate(composeExpressionWithParameters(e,Object.assign({},t)))}function computeCellScreenSize(e){return{width:Math.max(...e.map((e=>e[0]))),height:Math.max(...e.map((e=>e[1])))}}function Cell(e){var t;const{cell_config:r,coordinates:o,size:n,figure:i,player:s,selected:a,handleSelectThisCell:l}=e,c=composeSizedPoints(computeGeometry(r,o),n),{width:m,height:p}=computeCellScreenSize(c),u=computeCoordinate(r.position.x,o)*n,g=computeCoordinate(r.position.y,o)*n,h=null!==(t=r.colors)&&void 0!==t&&t.fill?evaluateExpressionWithParameters(r.colors.fill,o):"darkgrey";return React.createElement("div",{className:"cellWithFigure"+(a?" selected":""),style:{width:`${m}px`,height:`${p}px`,transform:`translate(${u}px, ${g}px)`}},React.createElement("svg",{className:"cell",style:{width:"100%",height:"100%"},xmlns:"http://www.w3.org/2000/svg",version:"1.1",onClick:l},React.createElement("polygon",{fill:h,points:c.join(" ")})),i?React.createElement("img",{className:"figure",src:`config/${game_name}/img/figures/${s}/${i}.svg`,alt:i,draggable:!1,onClick:l}):null)}