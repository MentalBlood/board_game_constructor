"use strict";function composeExpressionWithParameters(e,t){return`${Object.keys(t).map((e=>`const ${e} = ${t[e]};`)).join("\n")};\n${e}`}function evaluate(expression){return eval(expression)}function computeGeometry(e,t){return e.geometry.map((e=>e.map((e=>{if("number"==typeof e)return e;if("string"!=typeof e)return;return evaluate(composeExpressionWithParameters(e,t))}))))}function composeSizedPoints(e,t){return e.map((e=>[t*e[0],t*e[1]]))}function computeCoordinate(e,t){Object.values(t);return evaluate(composeExpressionWithParameters(e,Object.assign({},t)))}function computeCellScreenSize(e){return{width:Math.max(...e.map((e=>e[0]))),height:Math.max(...e.map((e=>e[1])))}}function Cell(e){const{cell_config:t,coordinates:n,size:o,figure:i,player:r,selected:s,handleSelectThisCell:a}=e,c=composeSizedPoints(computeGeometry(t,n),o),{width:l,height:m}=computeCellScreenSize(c),p=computeCoordinate(t.position.x,n)*o,u=computeCoordinate(t.position.y,n)*o;return React.createElement("div",{className:"cellWithFigure"+(s?" selected":""),style:{width:`${l}px`,height:`${m}px`,transform:`translate(${p}px, ${u}px)`}},React.createElement("svg",{className:"cell",style:{width:"100%",height:"100%"},xmlns:"http://www.w3.org/2000/svg",version:"1.1",onClick:a},React.createElement("polygon",{fill:"darkgrey",points:c.join(" ")})),i?React.createElement("img",{className:"figure",src:`config/chess/img/figures/${r}/${i}.svg`,alt:i,draggable:!1,onClick:a}):null)}