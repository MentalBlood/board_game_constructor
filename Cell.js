"use strict";function composeExpressionWithParameters(e,t){return`${Object.keys(t).map((e=>`const ${e} = ${t[e]};`)).join("\n")};\n${e}`}function evaluate(expression){return eval(expression)}function evaluateExpressionWithParameters(expression,parameters){return eval(composeExpressionWithParameters(expression,parameters))}function computeGeometry(e,t){return e.geometry.map((e=>e.map((e=>{if("number"==typeof e)return e;if("string"!=typeof e)return;return evaluate(composeExpressionWithParameters(e,t))}))))}function composeSizedPoints(e,t){return e.map((e=>[t*e[0],t*e[1]]))}function computeCoordinate(e,t){Object.values(t);return evaluate(composeExpressionWithParameters(e,Object.assign({},t)))}function computeCellScreenSize(e){return{width:Math.max(...e.map((e=>e[0]))),height:Math.max(...e.map((e=>e[1])))}}const default_cell_colors={fill:'"darkgrey"',selector:'"skyblue"'};function Cell(e){const{cell_config:t,coordinates:r,size:s,figure:o,player:n,selected:a,handleSelectThisCell:i}=e,l=composeSizedPoints(computeGeometry(t,r),s),{width:c,height:m}=computeCellScreenSize(l),p=computeCoordinate(t.position.x,r)*s,u=computeCoordinate(t.position.y,r)*s,g=Object.assign({},default_cell_colors,t.colors||{});return Object.keys(g).map((e=>g[e]=evaluateExpressionWithParameters(g[e],r))),React.createElement("div",{className:"cellWithFigure",style:{width:`${c}px`,height:`${m}px`,transform:`translate(${p}px, ${u}px)`}},React.createElement("svg",{className:"cell",style:{width:"100%",height:"100%"},xmlns:"http://www.w3.org/2000/svg",version:"1.1",onClick:i},React.createElement("polygon",{fill:g.fill,points:l.join(" ")})),o?React.createElement("img",{className:"figure",src:`config/${game_name}/img/figures/${n}/${o}.svg`,alt:o,draggable:!1,onClick:i}):null,a?React.createElement("div",{className:"selector",style:{border:`${Math.min(c,m)/10}px solid ${g.selector}`},onClick:i}):null)}